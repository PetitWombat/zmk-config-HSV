#include "zmk-helpers/helper.h"
#include "settings.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

#ifndef LB5

#define LB5 24

#endif

// Right bottom row pinky 2nd column
#ifndef RB5

#define RB5 35

#endif

#define DEF 0
#define WIN 1
#define SWP 2
#define SYM 3
#define NUM 4
#define ADJ 5
#define QUICK_TAP_MS 175

&sk {
    release-after-ms = <600>;
    quick-release;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <4 6>;
            then-layer = <7>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // symbols

        cb_excl {
            bindings = <&kp EXCL>;
            key-positions = <1 13>;
            timeout-ms = <30>;
        };

        cb_at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
            timeout-ms = <30>;
        };

        cb_hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
            timeout-ms = <30>;
        };

        cb_dllr {
            bindings = <&kp DLLR>;
            key-positions = <4 16>;
            timeout-ms = <30>;
        };

        cb_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <5 17>;
            timeout-ms = <30>;
        };

        cb_caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
            timeout-ms = <30>;
        };

        cb_amps {
            bindings = <&kp AMPS>;
            key-positions = <7 19>;
            timeout-ms = <30>;
        };

        cb_mult {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
            timeout-ms = <30>;
        };

        cb_lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <9 21>;
            timeout-ms = <30>;
        };

        cb_rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <10 22>;
            timeout-ms = <30>;
        };

        cb_reset {
            bindings = <&sys_reset>;
            key-positions = <2 25>;
        };

        cb_reset_right {
            bindings = <&sys_reset>;
            key-positions = <9 34>;
        };

        cb_out_ble {
            bindings = <&out OUT_BLE>;
            key-positions = <1 25>;
        };

        cb_out_usb {
            bindings = <&out OUT_USB>;
            key-positions = <2 26>;
        };

        cb_bt_nextprofile {
            bindings = <&bt BT_NXT>;
            key-positions = <3 27>;
        };

        cb_bt_clear {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <4 28>;
        };

        cb_out_ble_right {
            bindings = <&out OUT_BLE>;
            key-positions = <10 34>;
        };

        cb_out_usb_right {
            bindings = <&out OUT_USB>;
            key-positions = <9 33>;
        };

        cb_bt_nextprofile_right {
            bindings = <&bt BT_NXT>;
            key-positions = <8 32>;
        };

        cb_bt_clear_right {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <7 31>;
        };

        cb_bootloader {
            bindings = <&bootloader>;
            key-positions = <1 29>;
        };

        cb_bootloader_right {
            bindings = <&bootloader>;
            key-positions = <10 30>;
        };

        azerty {
            bindings = <&mo 9>;
            key-positions = <39 44>;
        };
    };

    behaviors {
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.
        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;

            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        lt_qk: layer_toggle_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TOGGLE_QUICK";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&kp>;
        };

        mt_sk: mod_tap_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_STICKY";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&sk>, <&kp>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lswp: left_swp {
            label = "LSWAP";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LGUI>, <&mo 0>, <&tog 0>;
        };

        rswp: right_swap {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_SWAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk RGUI>, <&mo 0>, <&tog 0>;
        };

        interrogation: interrogation {
            compatible = "zmk,behavior-mod-morph";
            label = "INTERROGATION";
            bindings = <&kp MINUS>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        virgule: virgule {
            compatible = "zmk,behavior-mod-morph";
            label = "VIRGULE";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        point: point {
            compatible = "zmk,behavior-mod-morph";
            label = "POINT";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        zoom: zoom {
            compatible = "zmk,behavior-mod-morph";
            label = "ZOOM";
            bindings = <&kp LC(PLUS)>, <&kp LC(MINUS)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        circonflexe: circonflexe {
            compatible = "zmk,behavior-mod-morph";
            label = "CIRCONFLEXE";
            bindings = <&kp CARET>, <&kp RA(NUMBER_6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        inferieur: inferieur {
            compatible = "zmk,behavior-mod-morph";
            label = "INFERIEUR";
            bindings = <&kp LT>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        superieur: superieur {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPERIEUR";
            bindings = <&kp GREATER_THAN>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        monnaies: monnaies {
            compatible = "zmk,behavior-mod-morph";
            label = "MONNAIES";
            bindings = <&kp DOLLAR>, <&sl 8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pourcent: pourcent {
            compatible = "zmk,behavior-mod-morph";
            label = "POURCENT";
            bindings = <&kp PERCENT>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        anti_circonflexe: anti_circonflexe {
            compatible = "zmk,behavior-mod-morph";
            label = "ANTI_CIRCONFLEXE";
            bindings = <&kp LEFT_BRACE>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        point_mort: point_mort {
            compatible = "zmk,behavior-mod-morph";
            label = "POINT_MORT";
            bindings = <&kp RIGHT_BRACE>, <&kp RA(N7)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        egal: egal {
            compatible = "zmk,behavior-mod-morph";
            label = "EGAL";
            bindings = <&kp EQUAL>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tilde: tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE";
            bindings = <&kp TILDE>, <&kp RA(TILDE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        onedk: onedk {
            compatible = "zmk,behavior-mod-morph";
            label = "ONEDK";
            bindings = <&sl 1>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        barre: barre {
            compatible = "zmk,behavior-mod-morph";
            label = "BARRE";
            bindings = <&kp MINUS>, <&kp RA(LS(N7))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        grave: grave {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE";
            bindings = <&kp GRAVE>, <&kp RA(GRAVE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        aigu: aigu {
            compatible = "zmk,behavior-mod-morph";
            label = "AIGU";
            bindings = <&kp SQT>, <&kp RA(SINGLE_QUOTE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        fois: fois {
            compatible = "zmk,behavior-mod-morph";
            label = "FOIS";
            bindings = <&kp ASTERISK>, <&kp RA(EQUAL)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        division: division {
            compatible = "zmk,behavior-mod-morph";
            label = "DIVISION";
            bindings = <&kp SLASH>, <&kp RA(LS(EQUAL))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rond_mort: rond_mort {
            compatible = "zmk,behavior-mod-morph";
            label = "ROND_MORT";
            bindings = <&kp AT>, <&kp RA(N7)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        barre_verticale: barre_verticale {
            compatible = "zmk,behavior-mod-morph";
            label = "BARRE_VERTICALE";
            bindings = <&kp LS(BACKSLASH)>, <&kp RA(LS(BACKSLASH))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        truc: truc {
            compatible = "zmk,behavior-mod-morph";
            label = "TRUC";
            bindings = <&kp EXCLAMATION>, <&kp RA(BACKSLASH)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus: plus {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS";
            bindings = <&kp PLUS>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backslash: backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSLASH";
            bindings = <&kp BACKSLASH>, <&sl 5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backspace: backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE";
            bindings = <&kp LC(BACKSPACE)>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    macros {
        e_circonflexe_min: e_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp E>;

            label = "E_CIRCONFLEXE_MIN";
        };

        e_circonflexe_maj: e_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp LS(E)>;

            label = "E_CIRCONFLEXE_MAJ";
        };

        u_circonflexe_maj: u_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp LS(U)>;

            label = "U_CIRCONFLEXE_MAJ";
        };

        u_circonflexe_min: u_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp U>;

            label = "U_CIRCONFLEXE_MIN";
        };

        i_circonflexe_min: i_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp I>;

            label = "I_CIRCONFLEXE_MIN";
        };

        i_circonflexe_maj: i_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp LS(I)>;

            label = "I_CIRCONFLEXE_MAJ";
        };

        a_circonflexe_maj: a_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp LS(A)>;

            label = "A_CIRCONFLEXE_MAJ";
        };

        a_circonflexe_min: a_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp A>;

            label = "A_CIRCONFLEXE_MIN";
        };

        o_circonflexe_min: o_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp O>;

            label = "O_CIRCONFLEXE_MIN";
        };

        o_circonflexe_maj: o_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp LS(O)>;

            label = "O_CIRCONFLEXE_MAJ";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEFAULT";
            bindings = <
&none        &kp Q           &kp C             &kp O           &kp P                     &kp W      &kp J   &kp M                      &kp D          &onedk            &kp Y              &none
&kp LC(TAB)  &hm LEFT_GUI A  &hm_l LEFT_ALT S  &hm_l LCTRL E   &hm_shift_l LEFT_SHIFT N  &kp F      &kp L   &hm_shift_r RIGHT_SHIFT R  &hm_r RCTRL T  &hm_r LEFT_ALT I  &hm_r RIGHT_GUI U  &zoom
&none        &kp Z           &kp X             &interrogation  &kp V                     &kp B      &point  &kp H                      &kp G          &virgule          &kp K              &none
                                               &none                                                                                   &none
             &kp LEFT_GUI    &mt LSHIFT TAB    &lt 4 ENTER     &backspace                                   &lt 6 DEL                  &lt 4 ENTER    &mt LSHFT SPACE   &mt LCTRL ESCAPE
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        onedk_layer {
            bindings = <
&trans      &a_circonflexe_min  &kp RA(C)     &kp RA(P)             &o_circonflexe_min     &kp RA(N5)      &trans             &trans    &kp UNDER           &kp LS(RA(SQT))        &u_circonflexe_min  &trans
&kp C_MUTE  &kp RA(Z)           &kp RA(G)     &kp RA(F)             &e_circonflexe_min     &kp RA(N)       &kp LPAR           &kp RPAR  &i_circonflexe_min  &kp RA(I)              &kp RA(H)           &kp LC(N0)
&trans      &kp RA(Q)           &kp RA(N9)    &kp RA(LEFT_BRACKET)  &kp RA(RIGHT_BRACKET)  &kp RA(N0)      &kp RA(LS(SLASH))  &trans    &kp RA(M)           &kp RA(LS(SEMICOLON))  &trans              &trans
                                              &trans                                                                                    &trans
            &trans              &lt 2 ESCAPE  &trans                &trans                                                    &trans    &trans              &lt 2 RA(LS(N0))       &trans
            >;
        };

        shift_1dk_layer {
            bindings = <
&trans  &a_circonflexe_maj  &kp RA(LS(C))  &kp RA(LS(P))  &o_circonflexe_maj  &kp RA(NUMBER_4)      &trans  &trans  &trans              &trans         &u_circonflexe_maj  &trans
&trans  &kp RA(LS(Z))       &kp LS(RA(G))  &kp RA(LS(F))  &e_circonflexe_maj  &kp RA(LS(N))         &trans  &trans  &i_circonflexe_maj  &kp RA(LS(I))  &kp RA(LS(H))       &trans
&trans  &kp RA(LS(Q))       &trans         &trans         &trans              &trans                &trans  &trans  &trans              &trans         &trans              &trans
                                           &trans                                                                   &trans
        &trans              &trans         &trans         &trans                                            &trans  &trans              &trans         &trans
            >;
        };

        greek_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
                        &trans                                      &trans
        &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans
            >;
        };

        sym_layer {
            label = "SYMBOLS";
            bindings = <
&trans  &circonflexe       &inferieur            &superieur             &monnaies    &pourcent      &rond_mort        &kp AMPS  &fois          &aigu          &grave             &trans
&trans  &anti_circonflexe  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &point_mort  &egal          &backslash        &plus     &barre         &division      &kp DOUBLE_QUOTES  &trans
&trans  &tilde             &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp UNDER    &kp HASH       &barre_verticale  &truc     &kp SEMICOLON  &kp RS(COLON)  &kp QUESTION       &trans
                                                 &trans                                                                         &trans
        &trans             &trans                &trans                 &trans                                        &trans    &trans         &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp C_NEXT C_PREV>;
        };

        barre_layer {
            bindings = <
&trans  &trans  &trans  &kp RA(L)  &trans  &trans      &trans  &kp RA(D)  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans      &trans  &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans      &trans  &trans     &trans  &trans  &trans  &trans
                        &trans                                            &trans
        &trans  &trans  &trans     &trans                      &trans     &trans  &trans  &trans
            >;
        };

        num_layer {
            label = "NUMBERS";
            bindings = <
&trans  &ht F1 N1  &ht F2 N2  &kp UP_ARROW    &ht F4 N4  &ht F5 N5      &kp SLASH  &kp N7        &kp N8        &kp N9        &kp COLON  &trans
&trans  &trans     &kp LEFT   &kp DOWN_ARROW  &kp RIGHT  &trans         &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0     &trans
&trans  &trans     &trans     &trans          &trans     &trans         &kp COMMA  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT    &trans
                              &trans                                                             &trans
        &trans     &trans     &trans          &trans                               &trans        &trans        &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp HOME END &inc_dec_kp C_NEXT C_PREV>;
        };

        adj_layer {
            label = "ADJUST";
            bindings = <
&bootloader  &rgb_ug RGB_TOG    &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI      &out OUT_TOG  &trans    &trans      &trans        &trans      &bootloader
&sys_reset   &rgb_ug RGB_EFF    &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD      &trans        &trans    &trans      &trans        &trans      &sys_reset
&bt BT_CLR   &bt BT_SEL 0       &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4         &kp C_PREV    &kp C_PP  &kp C_NEXT  &kp C_VOL_UP  &kp C_MUTE  &kp C_VOL_DN
                                                 &trans                                                                         &trans
             &ext_power EP_TOG  &to 0            &trans           &trans                                              &trans    &trans      &to 0         &trans
            >;

            // F15 and F14 are brightness controls for macOS

            sensor-bindings = <&inc_dec_kp F15 F14 &inc_dec_kp PG_UP PG_DN>;
        };

        currencies_layer {
            bindings = <
&trans  &trans  &kp RA(LS(N5))  &trans      &trans  &trans      &trans            &trans  &trans  &trans  &kp RA(LS(NUMBER_4))  &trans
&trans  &trans  &kp DOLLAR      &kp RA(N5)  &trans  &trans      &kp RA(NUMBER_4)  &trans  &trans  &trans  &trans                &trans
&trans  &trans  &trans          &trans      &trans  &trans      &trans            &trans  &trans  &trans  &trans                &trans
                                &trans                                                    &trans
        &trans  &trans          &trans      &trans                                &trans  &trans  &trans  &trans
            >;
        };

        azerty_layer {
            bindings = <
&trans  &kp A   &kp Z   &kp E   &kp R   &kp T      &kp Y  &kp U   &kp I   &kp O   &kp P   &trans
&trans  &kp Q   &kp S   &kp D   &kp F   &kp G      &kp H  &kp J   &kp K   &kp L   &kp M   &trans
&trans  &kp W   &kp X   &kp C   &kp V   &kp B      &kp N  &trans  &trans  &trans  &trans  &trans
                        &trans                                    &trans
        &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans
            >;
        };
    };
};
