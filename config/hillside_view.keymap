#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// Left bottom row pinky 2nd column

#ifndef LB5

#define LB5 24

#endif

// Right bottom row pinky 2nd column
#ifndef RB5

#define RB5 35

#endif

#define DEF 0
#define WIN 1
#define SWP 2
#define SYM 3
#define NUM 4
#define ADJ 5
#define QUICK_TAP_MS 175

&sk {
    release-after-ms = <600>;
    quick-release;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <5 6>;
            then-layer = <7>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // symbols

        cb_excl {
            bindings = <&kp EXCL>;
            key-positions = <1 13>;
            timeout-ms = <30>;
        };

        cb_at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
            timeout-ms = <30>;
        };

        cb_hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
            timeout-ms = <30>;
        };

        cb_dllr {
            bindings = <&kp DLLR>;
            key-positions = <4 16>;
            timeout-ms = <30>;
        };

        cb_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <5 17>;
            timeout-ms = <30>;
        };

        cb_caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
            timeout-ms = <30>;
        };

        cb_amps {
            bindings = <&kp AMPS>;
            key-positions = <7 19>;
            timeout-ms = <30>;
        };

        cb_mult {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
            timeout-ms = <30>;
        };

        cb_lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <9 21>;
            timeout-ms = <30>;
        };

        cb_rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <10 22>;
            timeout-ms = <30>;
        };

        cb_bootloader {
            bindings = <&bootloader>;
            key-positions = <0 2>;
        };

        cb_bootloader_right {
            bindings = <&bootloader>;
            key-positions = <11 9>;
        };

        cb_out_ble {
            bindings = <&out OUT_BLE>;
            key-positions = <1 25>;
        };

        cb_out_usb {
            bindings = <&out OUT_USB>;
            key-positions = <2 26>;
        };

        cb_bt_nextprofile {
            bindings = <&bt BT_NXT>;
            key-positions = <3 27>;
        };

        cb_bt_clear {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <4 28>;
        };

        cb_out_ble_right {
            bindings = <&out OUT_BLE>;
            key-positions = <10 34>;
        };

        cb_out_usb_right {
            bindings = <&out OUT_USB>;
            key-positions = <9 33>;
        };

        cb_bt_nextprofile_right {
            bindings = <&bt BT_NXT>;
            key-positions = <8 32>;
        };

        cb_bt_clear_right {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <7 31>;
        };
    };

    behaviors {
        lt_qk: layer_toggle_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TOGGLE_QUICK";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&kp>;
        };

        mt_sk: mod_tap_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_STICKY";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&sk>, <&kp>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lswp: left_swp {
            label = "LSWAP";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LGUI>, <&mo 4>, <&tog 4>;
        };

        rswp: right_swap {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_SWAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk RGUI>, <&mo 4>, <&tog 4>;
        };

        interrogation: interrogation {
            compatible = "zmk,behavior-mod-morph";
            label = "INTERROGATION";
            bindings = <&kp MINUS>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        virgule: virgule {
            compatible = "zmk,behavior-mod-morph";
            label = "VIRGULE";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        point: point {
            compatible = "zmk,behavior-mod-morph";
            label = "POINT";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        zoom: zoom {
            compatible = "zmk,behavior-mod-morph";
            label = "ZOOM";
            bindings = <&kp LC(PLUS)>, <&kp LC(MINUS)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        e_circonflexe: e_circonflexe {
            compatible = "zmk,behavior-mod-morph";
            label = "E_CIRCONFLEXE";
            bindings = <&e_circonflexe_min>, <&e_circonflexe_maj>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        i_circonflexe: i_circonflexe {
            compatible = "zmk,behavior-mod-morph";
            label = "I_CIRCONFLEXE";
            bindings = <&i_circonflexe_min>, <&i_circonflexe_maj>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_circonflexe: u_circonflexe {
            compatible = "zmk,behavior-mod-morph";
            label = "U_CIRCONFLEXE";
            bindings = <&u_circonflexe_min>, <&u_circonflexe_maj>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_circonflexe: a_circonflexe {
            compatible = "zmk,behavior-mod-morph";
            label = "A_CIRCONFLEXE";
            bindings = <&a_circonflexe_min>, <&a_circonflexe_maj>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_circonflexe: o_circonflexe {
            compatible = "zmk,behavior-mod-morph";
            label = "O_CIRCONFLEXE";
            bindings = <&o_circonflexe_min>, <&o_circonflexe_maj>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        e_circonflexe_min: e_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp E>;

            label = "E_CIRCONFLEXE_MIN";
        };

        e_circonflexe_maj: e_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp LS(E)>;

            label = "E_CIRCONFLEXE_MAJ";
        };

        u_circonflexe_maj: u_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp LS(U)>;

            label = "U_CIRCONFLEXE_MAJ";
        };

        u_circonflexe_min: u_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp U>;

            label = "U_CIRCONFLEXE_MIN";
        };

        i_circonflexe_min: i_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp I>;

            label = "I_CIRCONFLEXE_MIN";
        };

        i_circonflexe_maj: i_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp LS(I)>;

            label = "I_CIRCONFLEXE_MAJ";
        };

        a_circonflexe_maj: a_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp LS(A)>;

            label = "A_CIRCONFLEXE_MAJ";
        };

        a_circonflexe_min: a_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp A>;

            label = "A_CIRCONFLEXE_MIN";
        };

        o_circonflexe_min: o_circonflexe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp O>;

            label = "O_CIRCONFLEXE_MIN";
        };

        o_circonflexe_maj: o_circonflexe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp RALT>,
                <&macro_press>,
                <&kp LS(O)>;

            label = "O_CIRCONFLEXE_MAJ";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEFAULT";
            bindings = <
&none        &kp Q    &kp C          &kp O           &kp P            &kp W      &kp J   &kp M      &kp D        &sl 1            &kp Y         &none
&kp LC(TAB)  &kp A    &kp S          &kp E           &kp N            &kp F      &kp L   &kp R      &kp T        &kp I            &kp U         &zoom
&none        &kp Z    &kp X          &interrogation  &kp V            &kp B      &point  &kp H      &kp G        &virgule         &kp K         &none
                                     &kp SPACE                                                      &kp C_MUTE
             &kp ESC  &mt LCTRL TAB  &lt 5 ENTER     &lt 6 BACKSPACE                     &lt 6 DEL  &lt 5 ENTER  &mt LSHFT SPACE  &kp LEFT_GUI
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        onedk_layer {
            bindings = <
&trans  &a_circonflexe  &kp RA(C)  &kp RA(P)  &o_circonflexe  &trans         &trans    &trans    &trans          &kp RA(LS(APOS))  &u_circonflexe  &trans
&trans  &kp RA(Z)       &kp RA(G)  &kp RA(F)  &e_circonflexe  &kp RA(N)      &kp LPAR  &kp RPAR  &i_circonflexe  &kp RA(I)         &kp RA(H)       &trans
&trans  &kp RA(Q)       &kp RA(S)  &trans     &trans          &trans         &trans    &trans    &sl 2           &trans            &trans          &trans
                                   &trans                                                        &trans
        &trans          &trans     &trans     &trans                                   &trans    &trans          &trans            &trans
            >;
        };

        greek_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
                        &trans                                      &trans
        &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans
            >;
        };

        winlinux_layer {
            label = "WINLINUX";
            bindings = <
&trans  &trans         &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans            &trans
&trans  &trans         &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans            &trans
&trans  &mt_sk LGUI Z  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &mt_sk RGUI FSLH  &trans
                               &trans                                      &trans
        &kp LCTRL      &trans  &trans  &trans                      &trans  &trans  &trans  &kp RCTRL
            >;
        };

        swap_layer {
            label = "SWAP";
            bindings = <
&kp PIPE   &ht N0 P           &ht N9 O         &ht N8 I      &ht N7 U    &ht N6 Y      &ht N5 T  &ht N4 R    &ht N3 E       &ht N2 W       &ht N1 Q        &ht GRAVE TAB
&kp SQT    &kp SEMI           &kp L            &kp K         &kp J       &kp H         &kp G     &kp F       &kp D          &kp S          &kp A           &kp ESC
&sk RSHFT  &mt_sk RCTRL FSLH  &mt_sk RALT DOT  &kp COMMA     &kp M       &kp N         &kp B     &kp V       &kp C          &mt_sk LALT X  &mt_sk LCTRL Z  &sk LSHFT
                                               &kp C_MUTE                                                    &kp SPACE
           &tog 4             &kp RET          &lt_qk 6 DEL  &sk RSHIFT                          &sk LSHIFT  &lt_qk 5 BSPC  &kp SPACE      &tog 4
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        sym_layer {
            label = "SYMBOLS";
            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT      &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &trans    &trans  &trans    &trans    &trans         &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &trans    &trans  &trans    &trans    &trans         &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                          &kp END                                                  &kp C_PP
        &trans    &trans  &trans    &trans                              &trans     &trans           &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp C_NEXT C_PREV>;
        };

        num_layer {
            label = "NUMBERS";
            bindings = <
&kp TAB  &ht F1 N1  &ht F2 N2  &ht F3 N3  &ht F4 N4  &ht F5 N5      &ht F6 N6  &ht F7 N7  &ht F8 N8  &ht F9 N9  &ht F10 N0  &trans
&trans   &trans     &trans     &trans     &trans     &trans         &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans      &trans
&trans   &trans     &trans     &trans     &trans     &trans         &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans      &trans
                               &trans                                                     &trans
         &trans     &trans     &trans     &trans                               &trans     &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp HOME END &inc_dec_kp C_NEXT C_PREV>;
        };

        adj_layer {
            label = "ADJUST";
            bindings = <
&bootloader  &rgb_ug RGB_TOG    &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI      &out OUT_TOG  &trans    &trans      &trans        &trans      &bootloader
&sys_reset   &rgb_ug RGB_EFF    &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD      &trans        &trans    &trans      &trans        &trans      &sys_reset
&bt BT_CLR   &bt BT_SEL 0       &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4         &kp C_PREV    &kp C_PP  &kp C_NEXT  &kp C_VOL_UP  &kp C_MUTE  &kp C_VOL_DN
                                                 &trans                                                                         &trans
             &ext_power EP_TOG  &to 3            &trans           &trans                                              &trans    &trans      &to 0         &trans
            >;

            // F15 and F14 are brightness controls for macOS

            sensor-bindings = <&inc_dec_kp F15 F14 &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
